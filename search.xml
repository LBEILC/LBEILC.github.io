<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Spring Boot+Vite+Vue3二手商城</title>
      <link href="/2022/12/24/Spring-Boot-Vite-Vue3%E4%BA%8C%E6%89%8B%E5%95%86%E5%9F%8E-1/"/>
      <url>/2022/12/24/Spring-Boot-Vite-Vue3%E4%BA%8C%E6%89%8B%E5%95%86%E5%9F%8E-1/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Boot-Vite-Vue3二手商城"><a href="#Spring-Boot-Vite-Vue3二手商城" class="headerlink" title="Spring Boot+Vite+Vue3二手商城"></a>Spring Boot+Vite+Vue3二手商城</h1><h2 id="软件环境"><a href="#软件环境" class="headerlink" title="软件环境"></a>软件环境</h2><ul><li><p>node .js v16.16.0</p></li><li><p>npm v8.11.0</p></li><li><p>jdk v1.8</p></li><li><p>vite v2.9.13</p></li><li><p>后端JAVAIDE</p><ul><li>idea 2022.2.1</li></ul></li><li><p>前端开发IDE</p><ul><li><p>webStrom 2022.2.1</p></li><li><p>HBuilderX 3.6.14</p></li></ul></li><li><p>maven-3.8.6-bin</p></li></ul><h2 id="前端框架搭建"><a href="#前端框架搭建" class="headerlink" title="前端框架搭建"></a>前端框架搭建</h2><h3 id="vite-搭建"><a href="#vite-搭建" class="headerlink" title="vite 搭建"></a>vite 搭建</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># npm 7+, 需要额外的双横线：</span><span class="token function">npm</span> init vite@latest 项目名称 -- <span class="token parameter variable">--template</span> vue<span class="token builtin class-name">cd</span> 安装路径<span class="token function">npm</span> <span class="token function">install</span><span class="token function">npm</span> run dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="引入element-plus"><a href="#引入element-plus" class="headerlink" title="引入element-plus"></a>引入element-plus</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> element-plus <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="引入vue-router"><a href="#引入vue-router" class="headerlink" title="引入vue-router"></a>引入vue-router</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> vue-router <span class="token parameter variable">-S</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="修改vite项目下的main-js"><a href="#修改vite项目下的main-js" class="headerlink" title="修改vite项目下的main.js"></a>修改vite项目下的main.js</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createApp <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> ElementPlus <span class="token keyword">from</span> <span class="token string">'element-plus'</span><span class="token comment">//引入element-plus框架</span><span class="token keyword">import</span> <span class="token string">'element-plus/dist/index.css'</span><span class="token comment">//应用element-plus样式</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'./router'</span><span class="token comment">//引入vue-router</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ElementPlus<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span class="token comment">//.use(ElementPlus).use(router)使用引入的组件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="前端框架编写"><a href="#前端框架编写" class="headerlink" title="前端框架编写"></a>前端框架编写</h2><h3 id="编写router配置"><a href="#编写router配置" class="headerlink" title="编写router配置"></a>编写router配置</h3><ul><li><p>在src目录下创建router目录</p></li><li><p>在目录下床架index.js来配置路由文件</p></li><li><p>```js<br>import {</p><pre><code>createRouter,createWebHistory,</code></pre><p>} from ‘vue-router’</p><p>// 默认的网页标题<br>const defaultTitle = ‘home’;</p><p>// 配置路由文件<br>const routes = [</p><pre><code>&#123;    // 对应的路由路径    path: &#39;/&#39;,    name: &#39;Home&#39;,    // 对应的页面    component: () =&gt; import(&#39;../views/Home.vue&#39;),    // 对应页面的名称    meta: &#123;hidden: true, title: &quot;主页&quot;&#125;&#125;,</code></pre><p>]</p><p>// 创建路由对象<br>const router = createRouter({</p><pre><code>history: createWebHistory(&quot;/&quot;),routes: routes,</code></pre><p>})</p><p>// 改变对应页面的标题<br>router.beforeEach((to, from, next) =&gt; {</p><pre><code>document.title = to.meta.title ? to.meta.title : defaultTitle;next();</code></pre><p>});<br>/**</p><ul><li>输出对象</li></ul><p> */<br>export default router;</p><pre class="line-numbers language-none"><code class="language-none">### 应用router配置+ 在src目录下创建views目录,即具体的路由界面+ 在views目录下创建需要的页面+ 改写App.vue+ &#96;&#96;&#96;html  &lt;template&gt;    &lt;router-view &#x2F;&gt;  &lt;&#x2F;template&gt;    &lt;script&gt;    &lt;&#x2F;script&gt;    &lt;style&gt;  * &#123;    margin: 0;    padding: 0;  &#125;  &lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="运行前端框架"><a href="#运行前端框架" class="headerlink" title="运行前端框架"></a>运行前端框架</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> run dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="编写登录页面"><a href="#编写登录页面" class="headerlink" title="编写登录页面"></a>编写登录页面</h2><h3 id="页面主体"><a href="#页面主体" class="headerlink" title="页面主体"></a>页面主体</h3><h2 id="编写SM-MS图床上传-巨坑"><a href="#编写SM-MS图床上传-巨坑" class="headerlink" title="编写SM.MS图床上传(巨坑)"></a>编写SM.MS图床上传(巨坑)</h2><h4 id="在vite-config-js中配置跨域设置"><a href="#在vite-config-js中配置跨域设置" class="headerlink" title="在vite.config.js中配置跨域设置"></a>在vite.config.js中配置跨域设置</h4><ul><li><p>坑:不能直接使用官方api地址,官方api地址在中国无法访问,需要改为”<a href="https://smms.app/api/v2/&quot;">https://smms.app/api/v2/&quot;</a></p></li><li><p>```js<br>server:{</p><pre><code>proxy: &#123;  &#39;/api&#39;: &#123;    secure: false,    changeOrigin: true,    target: &#39;https://smms.app/api/v2/&#39;,    rewrite: path =&gt; path.replace(/^\/api/, &#39;&#39;)  &#125;&#125;</code></pre><p>  }</p><pre class="line-numbers language-none"><code class="language-none">#### 编写前端请求&#96;&#96;&#96;html&lt;template&gt;    &lt;input type&#x3D;&quot;file&quot; accept&#x3D;&quot;image&#x2F;*&quot; ref&#x3D;&quot;picture&quot; multiple&#x3D;&quot;multiple&quot; @change&#x3D;&quot;getPicture($event)&quot;&#x2F;&gt;  &lt;&#x2F;template&gt;  &lt;script setup&gt;  import axios from &quot;axios&quot;;  function getPicture(e) &#123;    const formData &#x3D; new FormData();    formData.append(&quot;smfile&quot;, e.target.files[0]);    axios(&#123;      method: &quot;POST&quot;,      url: &quot;&#x2F;api&#x2F;upload&quot;,&#x2F;&#x2F;sm.ms图床      headers: &#123;&#39;Content-Type&#39;: &#39;multipart&#x2F;form-data&#39;, &#39;Authorization&#39;: &#39;kNpYkOLitfvgPOkitOTBwDfzNzGPMDLY&#39;&#125;,      data: formData    &#125;).then((response) &#x3D;&gt; &#123;      &#x2F;&#x2F; 在控制台输出响应体中图片在服务器中的url地址      console.log(response.data)&#x2F;&#x2F;response.data就有返回的图片地址    &#125;);  &#125; &#x2F;&#x2F;存储图片  &lt;&#x2F;script&gt;  &lt;style&gt;  &lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="后端框架搭建"><a href="#后端框架搭建" class="headerlink" title="后端框架搭建"></a>后端框架搭建</h2><h3 id="配置maven-提高导包速度"><a href="#配置maven-提高导包速度" class="headerlink" title="配置maven(提高导包速度)"></a>配置maven(提高导包速度)</h3><ul><li>apache-maven-3.8.6\conf\setting.xml</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>alimaven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>aliyun maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.aliyun.com/nexus/content/groups/public/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>uk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Human Readable Name for this Mirror.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://uk.maven.org/maven2/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>CN<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>OSChina Central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.oschina.net/content/groups/public/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>nexus<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>internal nexus repository<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://repo.maven.apache.org/maven2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="设置idea"><a href="#设置idea" class="headerlink" title="设置idea"></a>设置idea</h3><h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><ul><li><p>MyBatisX</p></li><li><p>LomBok(默认已安装)</p></li></ul><h4 id="更改文件编码格式"><a href="#更改文件编码格式" class="headerlink" title="更改文件编码格式"></a>更改文件编码格式</h4><ul><li>全改为UTF-8</li></ul><p><img src="Photo/%E6%94%B9UTF-8.png" alt="改UTF-8"></p><h4 id="设置maven路径"><a href="#设置maven路径" class="headerlink" title="设置maven路径"></a>设置maven路径</h4><p><img src="Photo/%E8%AE%BE%E7%BD%AEmaven%E8%B7%AF%E5%BE%84.png" alt="设置maven路径"></p><h3 id="创建Spring-Boot项目"><a href="#创建Spring-Boot项目" class="headerlink" title="创建Spring-Boot项目"></a>创建Spring-Boot项目</h3><ul><li><p>使用idea自动搭建Spring-Boot项目</p></li><li><p>选择生成器中的Spring Initializer</p></li><li><p>将服务器URL改为:start.aliyun.com</p></li><li><p>类型选择Maven</p></li><li><p>Java版本选Java8</p></li><li><p><img src="Photo/%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE.png" alt="创建项目"></p></li><li><ul><li><p>选择组件</p></li><li><p>Spring Web (SpringMVC)</p></li><li><p>Mybatis</p></li><li><p>Lombok</p></li></ul></li></ul><h2 id="编写后端框架"><a href="#编写后端框架" class="headerlink" title="编写后端框架"></a>编写后端框架</h2><h3 id="设置application-properties来链接数据库"><a href="#设置application-properties来链接数据库" class="headerlink" title="设置application.properties来链接数据库"></a>设置application.properties来链接数据库</h3><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment"># 应用名称</span><span class="token key attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token value attr-value">demo</span><span class="token comment">#下面这些内容是为了让MyBatis映射</span><span class="token comment">#指定Mybatis的Mapper文件</span><span class="token key attr-name">mybatis.mapper-locations</span><span class="token punctuation">=</span><span class="token value attr-value">classpath:mappers/*xml</span><span class="token comment">#指定Mybatis的实体目录</span><span class="token key attr-name">mybatis.type-aliases-package</span><span class="token punctuation">=</span><span class="token value attr-value">com.example.demo.entity</span><span class="token comment"># 数据库驱动：</span><span class="token key attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token value attr-value">com.mysql.cj.jdbc.Driver</span><span class="token comment"># 数据源名称</span><span class="token key attr-name">spring.datasource.name</span><span class="token punctuation">=</span><span class="token value attr-value">defaultDataSource</span><span class="token comment"># 数据库连接地址</span><span class="token key attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql://localhost:3306/数据库名称?serverTimezone=GMT%2b8&amp;characterEncoding=utf8</span><span class="token comment"># 数据库用户名&amp;密码：</span><span class="token key attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token value attr-value">root</span><span class="token key attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token value attr-value">root</span><span class="token comment"># 应用服务 WEB 访问端口</span><span class="token key attr-name">server.port</span><span class="token punctuation">=</span><span class="token value attr-value">8080</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="解决跨域问题"><a href="#解决跨域问题" class="headerlink" title="解决跨域问题"></a>解决跨域问题</h3><ul><li><p>在路径下新建common 包</p></li><li><p>新建Java类,命名为CorsConfig</p></li><li><p>```java<br>import org.springframework.context.annotation.Bean;<br>import org.springframework.context.annotation.Configuration;<br>import org.springframework.web.cors.CorsConfiguration;<br>import org.springframework.web.cors.UrlBasedCorsConfigurationSource;<br>import org.springframework.web.filter.CorsFilter;</p><p>@Configuration<br>public class CorsConfig {</p><pre><code>// 当前跨域请求最大有效时长。这里默认1天private static final long MAX_AGE = 24 * 60 * 60;@Beanpublic CorsFilter corsFilter() &#123;    UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();    CorsConfiguration corsConfiguration = new CorsConfiguration();    corsConfiguration.addAllowedOrigin(&quot;*&quot;); // 1 设置访问源地址    corsConfiguration.addAllowedHeader(&quot;*&quot;); // 2 设置访问源请求头    corsConfiguration.addAllowedMethod(&quot;*&quot;); // 3 设置访问源请求方法    corsConfiguration.setMaxAge(MAX_AGE);    source.registerCorsConfiguration(&quot;/**&quot;, corsConfiguration); // 4 对接口配置跨域设置    return new CorsFilter(source);&#125;</code></pre><p>}</p><pre class="line-numbers language-none"><code class="language-none">### 创建Mapper(接口)目录在resources文件下创建mapper目录(mybatis.mapper-locations&#x3D;classpath:mappers&#x2F;*xml由上方该条语句来确定创建目录的位置)### 创建entity(实体)类+ 创建entity包,用于管理不同实例entity类+ 以实例User为例+ &#96;&#96;&#96;java  &#x2F;&#x2F; 引入lombok,快速创建get,set函数  import lombok.Data;    &#x2F;&#x2F; 标记为lombok的Data  @Data  public class User &#123;      &#x2F;&#x2F; 根据数据库设置对应数据类型      private Integer id;      private String username;      private String password;      private String sex;      private Integer age;      private String phone;      private String email;      private String address;      private String avatar;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="创建和编写dao-工具-类"><a href="#创建和编写dao-工具-类" class="headerlink" title="创建和编写dao(工具)类"></a>创建和编写dao(工具)类</h3><ul><li><p>创建dao包,用于管理不同实例dao类</p></li><li><p>以实例UserDao为例</p></li><li><p>```java<br>import com.example.demo.entity.User;<br>import org.apache.ibatis.annotations.Mapper;<br>import org.apache.ibatis.annotations.Param;</p><p>import java.util.List;</p><p>// 为controller类中使用@Autowired自动注入<br>@Mapper<br>public interface UserDao {<br>// 创建函数后使用Alt+Enter快捷键通过插件快速创建对应的Mapper(需要先创建Mapper接口)</p><pre><code>// 寻找表中所有元素List&lt;User&gt; findAll();User findById(Integer id);// @Param(&quot;username&quot;) String username 传入参数,且参数名称为&quot;username&quot;User getByUser(@Param(&quot;username&quot;) String username, @Param(&quot;password&quot;) String password);// 添加后会返回向表中添加元素的个数int insert(User user);int update(User user);int deleteById(Integer id);User findByUser(String username);</code></pre><p>}</p><pre class="line-numbers language-none"><code class="language-none">+ 配置相应Mapper.xml的文件头部来相互链接+ 以UserMapper.xml文件为例+ &#96;&#96;&#96;xml  &lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;  &lt;!DOCTYPE mapper          PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Mapper 3.0&#x2F;&#x2F;EN&quot;          &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-mapper.dtd&quot;&gt;  &lt;mapper namespace&#x3D;&quot;对应Dao类的空间地址&quot;&gt;  &lt;&#x2F;mapper&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="编写Mapper-写SQL查询语句-文件"><a href="#编写Mapper-写SQL查询语句-文件" class="headerlink" title="编写Mapper(写SQL查询语句)文件"></a>编写Mapper(写SQL查询语句)文件</h3></li><li><p>以UserMapper.xml为例</p></li><li><p>增:</p></li><li><p>```xml</p><insert id="insert">      INSERT INTO `user`(username, password,sex,age,phone,email,address,avatar)      values (#{username}, #{password},#{sex},#{age},#{phone},#{email},#{address},#{avatar});</insert><pre class="line-numbers language-none"><code class="language-none">+ 删:+ &#96;&#96;&#96;xml  &lt;delete id&#x3D;&quot;deleteById&quot;&gt;          DELETE          from &#96;user&#96;          where id &#x3D; #&#123;id&#125;;      &lt;&#x2F;delete&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>改(使用了动态判断):</p></li><li><p>```xml</p><update id="update">        update `user`        <set>            <if test="username != null and username != ''">                username = #{username},            </if>            <if test="password != null and password != ''">                password = #{password},            </if>            <if test="sex != null and sex != ''">                sex = #{sex},            </if>            <if test="age != null">                age = #{age},            </if>            <if test="phone != null and phone != ''">                phone = #{phone},            </if>            <if test="email != null and email != ''">                email = #{email},            </if>            <if test="address != null and address != ''">                address = #{address},            </if>            <if test="avatar != null and avatar != ''">                avatar = #{avatar},            </if>        </set>        where id = #{id}    </update><pre class="line-numbers language-none"><code class="language-none">+ 查: + + 查询所有:  + &#96;&#96;&#96;xml        &lt;select id&#x3D;&quot;findAll&quot; resultType&#x3D;&quot;com.example.demo.entity.User&quot;&gt;            SELECT *            FROM user;        &lt;&#x2F;select&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>通过Id查询</p></li><li><p>```xml</p><pre><code>&lt;select id=&quot;findById&quot; resultType=&quot;com.example.demo.entity.User&quot;&gt;    SELECT *    FROM user    WHERE id = #&#123;id&#125;;&lt;/select&gt;</code></pre><pre class="line-numbers language-none"><code class="language-none">+ 通过用户名和密码查询+ &#96;&#96;&#96;xml      &lt;select id&#x3D;&quot;getByUser&quot; resultType&#x3D;&quot;com.example.demo.entity.User&quot;&gt;          SELECT *          FROM user          WHERE username &#x3D; #&#123;username&#125;            AND password &#x3D; #&#123;password&#125;;      &lt;&#x2F;select&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="创建Result-返回数据打包-类"><a href="#创建Result-返回数据打包-类" class="headerlink" title="创建Result(返回数据打包)类"></a>创建Result(返回数据打包)类</h3><ul><li><p>在common包中创建Result类</p></li><li><p>```java<br>package com.example.demo.common;</p><p>import lombok.Data;</p><p>@Data<br>public class Result {</p><pre><code>private String code;private String msg;private Object data;private static final String SUCCESS_CODE = &quot;200&quot;;private static final String SUCCESS_MSG = &quot;请求成功&quot;;private static final String ERROR_CODE = &quot;-1&quot;;// 成功的返回的函数(无参数)public static Result success() &#123;    Result result = new Result();    result.setCode(SUCCESS_CODE);    result.setMsg(SUCCESS_MSG);    return result;&#125;// 有返回参数的函数public static Result success(Object data) &#123;    Result result =  success();    result.setData(data);    return result;&#125;// 请求失败后,返回一个失败原因public static Result error(String msg) &#123;    Result result = new Result();    result.setCode(ERROR_CODE);    result.setMsg(msg);    return result;&#125;</code></pre><p>}</p><pre class="line-numbers language-none"><code class="language-none">### 创建和编写controller(控制)类+ 创建controller包,用于管理不同实例controller类+ 以UserController为例&#96;&#96;&#96;java  package com.example.demo.controller;  import com.example.demo.common.Result;  import com.example.demo.dao.UserDao;  import com.example.demo.entity.User;  import org.springframework.beans.factory.annotation.Autowired;  import org.springframework.web.bind.annotation.*;  import java.util.List;  &#x2F;&#x2F; 设置该类为控制器类  @RestController  &#x2F;&#x2F; 设置默认访问路径,即通过&quot;127.0.0.1&#x2F;user&quot;来访问接口  @RequestMapping(&quot;&#x2F;user&quot;)  public class UserController &#123;      &#x2F;&#x2F; 自动注入      @Autowired      private UserDao userDao;      &#x2F;&#x2F; Get接口      @GetMapping      public Result findAll() &#123;          return Result.success(userDao.findAll());      &#125;      &#x2F;&#x2F; @PathVariable需要一个参数时      @GetMapping(&quot;&#x2F;&#123;id&#125;&quot;)      public Result findById(@PathVariable Integer id) &#123;          return Result.success(userDao.findById(id));      &#125;      @GetMapping(&quot;&#x2F;username&#x2F;&#123;username&#125;&quot;)      public Result findByUser(@PathVariable String username) &#123;          return Result.success(userDao.findByUser(username));      &#125;      &#x2F;&#x2F; @RequestBody 需要多个参数时,直接把前端的对象转换为实体类      @PostMapping      public Result save(@RequestBody User user) &#123;          &#x2F;&#x2F; 一旦不满足要求就直接返回失败          if (user.getUsername() &#x3D;&#x3D; null || user.getPassword() &#x3D;&#x3D; null) &#123;              return Result.error(&quot;参数错误&quot;);          &#125;          Result result &#x3D;Result.success(userDao.insert(user));          return result;      &#125;      @PostMapping(&quot;&#x2F;login&quot;)      public Result login(@RequestBody User user) &#123;          if (user.getUsername() &#x3D;&#x3D; null || user.getPassword() &#x3D;&#x3D; null) &#123;              return Result.error(&quot;参数错误&quot;);          &#125;          User result &#x3D; userDao.getByUser(user.getUsername(), user.getPassword());          if (result &#x3D;&#x3D; null) &#123;              return Result.error(&quot;账号或密码错误&quot;);          &#125;          return Result.success(result);      &#125;      @PutMapping      public Result update(@RequestBody User user) &#123;          if (user.getId() &#x3D;&#x3D; null) &#123;              return Result.error(&quot;参数错误&quot;);          &#125;          userDao.update(user);          return Result.success();      &#125;      @DeleteMapping(&quot;&#x2F;&#123;id&#125;&quot;)      public Result delete(@PathVariable Integer id) &#123;          if (id &#x3D;&#x3D; null || id &#x3D;&#x3D; 0) &#123;              return Result.error(&quot;参数错误&quot;);          &#125;          return Result.success(userDao.deleteById(id) &#x3D;&#x3D; 1);      &#125;  &#125; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/24/Spring-Boot-Vite-Vue3%E4%BA%8C%E6%89%8B%E5%95%86%E5%9F%8E/"/>
      <url>/2022/12/24/Spring-Boot-Vite-Vue3%E4%BA%8C%E6%89%8B%E5%95%86%E5%9F%8E/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Boot-Vite-Vue3二手商城"><a href="#Spring-Boot-Vite-Vue3二手商城" class="headerlink" title="Spring Boot+Vite+Vue3二手商城"></a>Spring Boot+Vite+Vue3二手商城</h1><h2 id="软件环境"><a href="#软件环境" class="headerlink" title="软件环境"></a>软件环境</h2><ul><li><p>node .js v16.16.0</p></li><li><p>npm v8.11.0</p></li><li><p>jdk v1.8</p></li><li><p>vite v2.9.13</p></li><li><p>后端JAVAIDE</p><ul><li>idea 2022.2.1</li></ul></li><li><p>前端开发IDE</p><ul><li><p>webStrom 2022.2.1</p></li><li><p>HBuilderX 3.6.14</p></li></ul></li><li><p>maven-3.8.6-bin</p></li></ul><h2 id="前端框架搭建"><a href="#前端框架搭建" class="headerlink" title="前端框架搭建"></a>前端框架搭建</h2><h3 id="vite-搭建"><a href="#vite-搭建" class="headerlink" title="vite 搭建"></a>vite 搭建</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># npm 7+, 需要额外的双横线：</span><span class="token function">npm</span> init vite@latest 项目名称 -- <span class="token parameter variable">--template</span> vue<span class="token builtin class-name">cd</span> 安装路径<span class="token function">npm</span> <span class="token function">install</span><span class="token function">npm</span> run dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="引入element-plus"><a href="#引入element-plus" class="headerlink" title="引入element-plus"></a>引入element-plus</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> element-plus <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="引入vue-router"><a href="#引入vue-router" class="headerlink" title="引入vue-router"></a>引入vue-router</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> vue-router <span class="token parameter variable">-S</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="修改vite项目下的main-js"><a href="#修改vite项目下的main-js" class="headerlink" title="修改vite项目下的main.js"></a>修改vite项目下的main.js</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createApp <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> ElementPlus <span class="token keyword">from</span> <span class="token string">'element-plus'</span><span class="token comment">//引入element-plus框架</span><span class="token keyword">import</span> <span class="token string">'element-plus/dist/index.css'</span><span class="token comment">//应用element-plus样式</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'./router'</span><span class="token comment">//引入vue-router</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ElementPlus<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span class="token comment">//.use(ElementPlus).use(router)使用引入的组件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="前端框架编写"><a href="#前端框架编写" class="headerlink" title="前端框架编写"></a>前端框架编写</h2><h3 id="编写router配置"><a href="#编写router配置" class="headerlink" title="编写router配置"></a>编写router配置</h3><ul><li><p>在src目录下创建router目录</p></li><li><p>在目录下床架index.js来配置路由文件</p></li><li><p>```js<br>import {</p><pre><code>createRouter,createWebHistory,</code></pre><p>} from ‘vue-router’</p><p>// 默认的网页标题<br>const defaultTitle = ‘home’;</p><p>// 配置路由文件<br>const routes = [</p><pre><code>&#123;    // 对应的路由路径    path: &#39;/&#39;,    name: &#39;Home&#39;,    // 对应的页面    component: () =&gt; import(&#39;../views/Home.vue&#39;),    // 对应页面的名称    meta: &#123;hidden: true, title: &quot;主页&quot;&#125;&#125;,</code></pre><p>]</p><p>// 创建路由对象<br>const router = createRouter({</p><pre><code>history: createWebHistory(&quot;/&quot;),routes: routes,</code></pre><p>})</p><p>// 改变对应页面的标题<br>router.beforeEach((to, from, next) =&gt; {</p><pre><code>document.title = to.meta.title ? to.meta.title : defaultTitle;next();</code></pre><p>});<br>/**</p><ul><li>输出对象</li></ul><p> */<br>export default router;</p><pre class="line-numbers language-none"><code class="language-none">### 应用router配置+ 在src目录下创建views目录,即具体的路由界面+ 在views目录下创建需要的页面+ 改写App.vue+ &#96;&#96;&#96;html  &lt;template&gt;    &lt;router-view &#x2F;&gt;  &lt;&#x2F;template&gt;    &lt;script&gt;    &lt;&#x2F;script&gt;    &lt;style&gt;  * &#123;    margin: 0;    padding: 0;  &#125;  &lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="运行前端框架"><a href="#运行前端框架" class="headerlink" title="运行前端框架"></a>运行前端框架</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> run dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="编写登录页面"><a href="#编写登录页面" class="headerlink" title="编写登录页面"></a>编写登录页面</h2><h3 id="页面主体"><a href="#页面主体" class="headerlink" title="页面主体"></a>页面主体</h3><h2 id="编写SM-MS图床上传-巨坑"><a href="#编写SM-MS图床上传-巨坑" class="headerlink" title="编写SM.MS图床上传(巨坑)"></a>编写SM.MS图床上传(巨坑)</h2><h4 id="在vite-config-js中配置跨域设置"><a href="#在vite-config-js中配置跨域设置" class="headerlink" title="在vite.config.js中配置跨域设置"></a>在vite.config.js中配置跨域设置</h4><ul><li><p>坑:不能直接使用官方api地址,官方api地址在中国无法访问,需要改为”<a href="https://smms.app/api/v2/&quot;">https://smms.app/api/v2/&quot;</a></p></li><li><p>```js<br>server:{</p><pre><code>proxy: &#123;  &#39;/api&#39;: &#123;    secure: false,    changeOrigin: true,    target: &#39;https://smms.app/api/v2/&#39;,    rewrite: path =&gt; path.replace(/^\/api/, &#39;&#39;)  &#125;&#125;</code></pre><p>  }</p><pre class="line-numbers language-none"><code class="language-none">#### 编写前端请求&#96;&#96;&#96;html&lt;template&gt;    &lt;input type&#x3D;&quot;file&quot; accept&#x3D;&quot;image&#x2F;*&quot; ref&#x3D;&quot;picture&quot; multiple&#x3D;&quot;multiple&quot; @change&#x3D;&quot;getPicture($event)&quot;&#x2F;&gt;  &lt;&#x2F;template&gt;  &lt;script setup&gt;  import axios from &quot;axios&quot;;  function getPicture(e) &#123;    const formData &#x3D; new FormData();    formData.append(&quot;smfile&quot;, e.target.files[0]);    axios(&#123;      method: &quot;POST&quot;,      url: &quot;&#x2F;api&#x2F;upload&quot;,&#x2F;&#x2F;sm.ms图床      headers: &#123;&#39;Content-Type&#39;: &#39;multipart&#x2F;form-data&#39;, &#39;Authorization&#39;: &#39;kNpYkOLitfvgPOkitOTBwDfzNzGPMDLY&#39;&#125;,      data: formData    &#125;).then((response) &#x3D;&gt; &#123;      &#x2F;&#x2F; 在控制台输出响应体中图片在服务器中的url地址      console.log(response.data)&#x2F;&#x2F;response.data就有返回的图片地址    &#125;);  &#125; &#x2F;&#x2F;存储图片  &lt;&#x2F;script&gt;  &lt;style&gt;  &lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="后端框架搭建"><a href="#后端框架搭建" class="headerlink" title="后端框架搭建"></a>后端框架搭建</h2><h3 id="配置maven-提高导包速度"><a href="#配置maven-提高导包速度" class="headerlink" title="配置maven(提高导包速度)"></a>配置maven(提高导包速度)</h3><ul><li>apache-maven-3.8.6\conf\setting.xml</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>alimaven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>aliyun maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.aliyun.com/nexus/content/groups/public/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>uk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Human Readable Name for this Mirror.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://uk.maven.org/maven2/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>CN<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>OSChina Central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.oschina.net/content/groups/public/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>nexus<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>internal nexus repository<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://repo.maven.apache.org/maven2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="设置idea"><a href="#设置idea" class="headerlink" title="设置idea"></a>设置idea</h3><h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><ul><li><p>MyBatisX</p></li><li><p>LomBok(默认已安装)</p></li></ul><h4 id="更改文件编码格式"><a href="#更改文件编码格式" class="headerlink" title="更改文件编码格式"></a>更改文件编码格式</h4><ul><li>全改为UTF-8</li></ul><p><img src="Photo/%E6%94%B9UTF-8.png" alt="改UTF-8"></p><h4 id="设置maven路径"><a href="#设置maven路径" class="headerlink" title="设置maven路径"></a>设置maven路径</h4><p><img src="Photo/%E8%AE%BE%E7%BD%AEmaven%E8%B7%AF%E5%BE%84.png" alt="设置maven路径"></p><h3 id="创建Spring-Boot项目"><a href="#创建Spring-Boot项目" class="headerlink" title="创建Spring-Boot项目"></a>创建Spring-Boot项目</h3><ul><li><p>使用idea自动搭建Spring-Boot项目</p></li><li><p>选择生成器中的Spring Initializer</p></li><li><p>将服务器URL改为:start.aliyun.com</p></li><li><p>类型选择Maven</p></li><li><p>Java版本选Java8</p></li><li><p><img src="Photo/%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE.png" alt="创建项目"></p></li><li><ul><li><p>选择组件</p></li><li><p>Spring Web (SpringMVC)</p></li><li><p>Mybatis</p></li><li><p>Lombok</p></li></ul></li></ul><h2 id="编写后端框架"><a href="#编写后端框架" class="headerlink" title="编写后端框架"></a>编写后端框架</h2><h3 id="设置application-properties来链接数据库"><a href="#设置application-properties来链接数据库" class="headerlink" title="设置application.properties来链接数据库"></a>设置application.properties来链接数据库</h3><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment"># 应用名称</span><span class="token key attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token value attr-value">demo</span><span class="token comment">#下面这些内容是为了让MyBatis映射</span><span class="token comment">#指定Mybatis的Mapper文件</span><span class="token key attr-name">mybatis.mapper-locations</span><span class="token punctuation">=</span><span class="token value attr-value">classpath:mappers/*xml</span><span class="token comment">#指定Mybatis的实体目录</span><span class="token key attr-name">mybatis.type-aliases-package</span><span class="token punctuation">=</span><span class="token value attr-value">com.example.demo.entity</span><span class="token comment"># 数据库驱动：</span><span class="token key attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token value attr-value">com.mysql.cj.jdbc.Driver</span><span class="token comment"># 数据源名称</span><span class="token key attr-name">spring.datasource.name</span><span class="token punctuation">=</span><span class="token value attr-value">defaultDataSource</span><span class="token comment"># 数据库连接地址</span><span class="token key attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql://localhost:3306/数据库名称?serverTimezone=GMT%2b8&amp;characterEncoding=utf8</span><span class="token comment"># 数据库用户名&amp;密码：</span><span class="token key attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token value attr-value">root</span><span class="token key attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token value attr-value">root</span><span class="token comment"># 应用服务 WEB 访问端口</span><span class="token key attr-name">server.port</span><span class="token punctuation">=</span><span class="token value attr-value">8080</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="解决跨域问题"><a href="#解决跨域问题" class="headerlink" title="解决跨域问题"></a>解决跨域问题</h3><ul><li><p>在路径下新建common 包</p></li><li><p>新建Java类,命名为CorsConfig</p></li><li><p>```java<br>import org.springframework.context.annotation.Bean;<br>import org.springframework.context.annotation.Configuration;<br>import org.springframework.web.cors.CorsConfiguration;<br>import org.springframework.web.cors.UrlBasedCorsConfigurationSource;<br>import org.springframework.web.filter.CorsFilter;</p><p>@Configuration<br>public class CorsConfig {</p><pre><code>// 当前跨域请求最大有效时长。这里默认1天private static final long MAX_AGE = 24 * 60 * 60;@Beanpublic CorsFilter corsFilter() &#123;    UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();    CorsConfiguration corsConfiguration = new CorsConfiguration();    corsConfiguration.addAllowedOrigin(&quot;*&quot;); // 1 设置访问源地址    corsConfiguration.addAllowedHeader(&quot;*&quot;); // 2 设置访问源请求头    corsConfiguration.addAllowedMethod(&quot;*&quot;); // 3 设置访问源请求方法    corsConfiguration.setMaxAge(MAX_AGE);    source.registerCorsConfiguration(&quot;/**&quot;, corsConfiguration); // 4 对接口配置跨域设置    return new CorsFilter(source);&#125;</code></pre><p>}</p><pre class="line-numbers language-none"><code class="language-none">### 创建Mapper(接口)目录在resources文件下创建mapper目录(mybatis.mapper-locations&#x3D;classpath:mappers&#x2F;*xml由上方该条语句来确定创建目录的位置)### 创建entity(实体)类+ 创建entity包,用于管理不同实例entity类+ 以实例User为例+ &#96;&#96;&#96;java  &#x2F;&#x2F; 引入lombok,快速创建get,set函数  import lombok.Data;    &#x2F;&#x2F; 标记为lombok的Data  @Data  public class User &#123;      &#x2F;&#x2F; 根据数据库设置对应数据类型      private Integer id;      private String username;      private String password;      private String sex;      private Integer age;      private String phone;      private String email;      private String address;      private String avatar;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="创建和编写dao-工具-类"><a href="#创建和编写dao-工具-类" class="headerlink" title="创建和编写dao(工具)类"></a>创建和编写dao(工具)类</h3><ul><li><p>创建dao包,用于管理不同实例dao类</p></li><li><p>以实例UserDao为例</p></li><li><p>```java<br>import com.example.demo.entity.User;<br>import org.apache.ibatis.annotations.Mapper;<br>import org.apache.ibatis.annotations.Param;</p><p>import java.util.List;</p><p>// 为controller类中使用@Autowired自动注入<br>@Mapper<br>public interface UserDao {<br>// 创建函数后使用Alt+Enter快捷键通过插件快速创建对应的Mapper(需要先创建Mapper接口)</p><pre><code>// 寻找表中所有元素List&lt;User&gt; findAll();User findById(Integer id);// @Param(&quot;username&quot;) String username 传入参数,且参数名称为&quot;username&quot;User getByUser(@Param(&quot;username&quot;) String username, @Param(&quot;password&quot;) String password);// 添加后会返回向表中添加元素的个数int insert(User user);int update(User user);int deleteById(Integer id);User findByUser(String username);</code></pre><p>}</p><pre class="line-numbers language-none"><code class="language-none">+ 配置相应Mapper.xml的文件头部来相互链接+ 以UserMapper.xml文件为例+ &#96;&#96;&#96;xml  &lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;  &lt;!DOCTYPE mapper          PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Mapper 3.0&#x2F;&#x2F;EN&quot;          &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-mapper.dtd&quot;&gt;  &lt;mapper namespace&#x3D;&quot;对应Dao类的空间地址&quot;&gt;  &lt;&#x2F;mapper&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="编写Mapper-写SQL查询语句-文件"><a href="#编写Mapper-写SQL查询语句-文件" class="headerlink" title="编写Mapper(写SQL查询语句)文件"></a>编写Mapper(写SQL查询语句)文件</h3></li><li><p>以UserMapper.xml为例</p></li><li><p>增:</p></li><li><p>```xml</p><insert id="insert">      INSERT INTO `user`(username, password,sex,age,phone,email,address,avatar)      values (#{username}, #{password},#{sex},#{age},#{phone},#{email},#{address},#{avatar});</insert><pre class="line-numbers language-none"><code class="language-none">+ 删:+ &#96;&#96;&#96;xml  &lt;delete id&#x3D;&quot;deleteById&quot;&gt;          DELETE          from &#96;user&#96;          where id &#x3D; #&#123;id&#125;;      &lt;&#x2F;delete&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>改(使用了动态判断):</p></li><li><p>```xml</p><update id="update">        update `user`        <set>            <if test="username != null and username != ''">                username = #{username},            </if>            <if test="password != null and password != ''">                password = #{password},            </if>            <if test="sex != null and sex != ''">                sex = #{sex},            </if>            <if test="age != null">                age = #{age},            </if>            <if test="phone != null and phone != ''">                phone = #{phone},            </if>            <if test="email != null and email != ''">                email = #{email},            </if>            <if test="address != null and address != ''">                address = #{address},            </if>            <if test="avatar != null and avatar != ''">                avatar = #{avatar},            </if>        </set>        where id = #{id}    </update><pre class="line-numbers language-none"><code class="language-none">+ 查: + + 查询所有:  + &#96;&#96;&#96;xml        &lt;select id&#x3D;&quot;findAll&quot; resultType&#x3D;&quot;com.example.demo.entity.User&quot;&gt;            SELECT *            FROM user;        &lt;&#x2F;select&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>通过Id查询</p></li><li><p>```xml</p><pre><code>&lt;select id=&quot;findById&quot; resultType=&quot;com.example.demo.entity.User&quot;&gt;    SELECT *    FROM user    WHERE id = #&#123;id&#125;;&lt;/select&gt;</code></pre><pre class="line-numbers language-none"><code class="language-none">+ 通过用户名和密码查询+ &#96;&#96;&#96;xml      &lt;select id&#x3D;&quot;getByUser&quot; resultType&#x3D;&quot;com.example.demo.entity.User&quot;&gt;          SELECT *          FROM user          WHERE username &#x3D; #&#123;username&#125;            AND password &#x3D; #&#123;password&#125;;      &lt;&#x2F;select&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="创建Result-返回数据打包-类"><a href="#创建Result-返回数据打包-类" class="headerlink" title="创建Result(返回数据打包)类"></a>创建Result(返回数据打包)类</h3><ul><li><p>在common包中创建Result类</p></li><li><p>```java<br>package com.example.demo.common;</p><p>import lombok.Data;</p><p>@Data<br>public class Result {</p><pre><code>private String code;private String msg;private Object data;private static final String SUCCESS_CODE = &quot;200&quot;;private static final String SUCCESS_MSG = &quot;请求成功&quot;;private static final String ERROR_CODE = &quot;-1&quot;;// 成功的返回的函数(无参数)public static Result success() &#123;    Result result = new Result();    result.setCode(SUCCESS_CODE);    result.setMsg(SUCCESS_MSG);    return result;&#125;// 有返回参数的函数public static Result success(Object data) &#123;    Result result =  success();    result.setData(data);    return result;&#125;// 请求失败后,返回一个失败原因public static Result error(String msg) &#123;    Result result = new Result();    result.setCode(ERROR_CODE);    result.setMsg(msg);    return result;&#125;</code></pre><p>}</p><pre class="line-numbers language-none"><code class="language-none">### 创建和编写controller(控制)类+ 创建controller包,用于管理不同实例controller类+ 以UserController为例&#96;&#96;&#96;java  package com.example.demo.controller;  import com.example.demo.common.Result;  import com.example.demo.dao.UserDao;  import com.example.demo.entity.User;  import org.springframework.beans.factory.annotation.Autowired;  import org.springframework.web.bind.annotation.*;  import java.util.List;  &#x2F;&#x2F; 设置该类为控制器类  @RestController  &#x2F;&#x2F; 设置默认访问路径,即通过&quot;127.0.0.1&#x2F;user&quot;来访问接口  @RequestMapping(&quot;&#x2F;user&quot;)  public class UserController &#123;      &#x2F;&#x2F; 自动注入      @Autowired      private UserDao userDao;      &#x2F;&#x2F; Get接口      @GetMapping      public Result findAll() &#123;          return Result.success(userDao.findAll());      &#125;      &#x2F;&#x2F; @PathVariable需要一个参数时      @GetMapping(&quot;&#x2F;&#123;id&#125;&quot;)      public Result findById(@PathVariable Integer id) &#123;          return Result.success(userDao.findById(id));      &#125;      @GetMapping(&quot;&#x2F;username&#x2F;&#123;username&#125;&quot;)      public Result findByUser(@PathVariable String username) &#123;          return Result.success(userDao.findByUser(username));      &#125;      &#x2F;&#x2F; @RequestBody 需要多个参数时,直接把前端的对象转换为实体类      @PostMapping      public Result save(@RequestBody User user) &#123;          &#x2F;&#x2F; 一旦不满足要求就直接返回失败          if (user.getUsername() &#x3D;&#x3D; null || user.getPassword() &#x3D;&#x3D; null) &#123;              return Result.error(&quot;参数错误&quot;);          &#125;          Result result &#x3D;Result.success(userDao.insert(user));          return result;      &#125;      @PostMapping(&quot;&#x2F;login&quot;)      public Result login(@RequestBody User user) &#123;          if (user.getUsername() &#x3D;&#x3D; null || user.getPassword() &#x3D;&#x3D; null) &#123;              return Result.error(&quot;参数错误&quot;);          &#125;          User result &#x3D; userDao.getByUser(user.getUsername(), user.getPassword());          if (result &#x3D;&#x3D; null) &#123;              return Result.error(&quot;账号或密码错误&quot;);          &#125;          return Result.success(result);      &#125;      @PutMapping      public Result update(@RequestBody User user) &#123;          if (user.getId() &#x3D;&#x3D; null) &#123;              return Result.error(&quot;参数错误&quot;);          &#125;          userDao.update(user);          return Result.success();      &#125;      @DeleteMapping(&quot;&#x2F;&#123;id&#125;&quot;)      public Result delete(@PathVariable Integer id) &#123;          if (id &#x3D;&#x3D; null || id &#x3D;&#x3D; 0) &#123;              return Result.error(&quot;参数错误&quot;);          &#125;          return Result.success(userDao.deleteById(id) &#x3D;&#x3D; 1);      &#125;  &#125; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
